#!/bin/bash

# --- template --- {{{
readonly cf="\\033[0m"
readonly red="\\033[0;31m"
readonly green="\\033[0;32m"
readonly yellow="\\033[0;33m"

err() {
  local _date
  _date=$(showdate)
  echo -e "[$_date][${red}ERROR${cf}]: $1" 1>&2
}

warn() {
  local _date
  _date=$(showdate)
  echo -e "[$_date][${yellow}WARNING${cf}]: $1"
}

info() {
  local _date
  _date=$(showdate)
  echo -e "[$_date][INFO]: $1 "
}

succ() {
  local _date
  _date=$(showdate)
  echo -e "[$_date][${green}SUCCESS${cf}]: $1"
}

showdate() {
  local _date
  _date=$(date +%d-%H.%M)
  echo "$_date"
}

cleanup() {
  info "cleanup.."
}
#}}}

show_help() {
  cat <<'EOF'

USAGE:
  runeboxes [options] <BOX_CHAR>

OPTIONS:
  -h: help
  -t: test: runeboxes_test
  -p: padding size
  -x: horizontal padding size
  -y: vertical padding size

EXAMPLE:
  echo apple | runeboxes @
  echo banana | runeboxes -p 3 \$
  echo -e "\U1F4A9" | runeboxes -x 8 -y 2 é‡‘
  fortune | cowsay -W 60 | runeboxes -x 4 $(echo -e "\U1F4A9")
EOF
}

run_runeboxes() {
  local in
  local max
  local singles
  local frame_empties
  local lens
  local l
  local i

  # read stdin
  in="$(cat -)"

  # tab_to_space
  in="$(tab_to_space "$in")"

  # set max and read liens
  while read -r l; do
    if [[ $(runewidth "$l") -gt $max ]]; then
      max=$(runewidth "$l")
    fi
    lines+=("$l")
  done <<<"$in"

  # make max to even if BOX_CHAR_RUNEWIDTH is 2
  if [[ "$BOX_CHAR_RUNEWIDTH" -eq 2 ]]; then
    if [[ $((max % 2)) -ne 0 ]]; then
      max=$((max + 1))
    fi
  fi

  singles="$((max + $((BOX_CHAR_RUNEWIDTH * 2)) + $((BOX_PADDING_X * 2))))"
  frame_empties="$((singles - $((BOX_CHAR_RUNEWIDTH * 2))))"
  lens="$((singles / BOX_CHAR_RUNEWIDTH))"

  # top border
  border_line "$1" "$lens"
  new_line

  # top empty frame
  for ((i = 0; i < "$BOX_PADDING_Y"; i++)); do
    empty_frame_line "$1" "$frame_empties"
    new_line
  done

  # input lines
  for l in "${lines[@]}"; do

    front_padding_block "$1"

    printf "%s" "$l"

    repeat_string ' ' $((max - $(runewidth "$l")))

    back_padding_block "$1"

    new_line
  done

  # bottom empty frame
  for ((i = 0; i < "$BOX_PADDING_Y"; i++)); do
    empty_frame_line "$1" "$frame_empties"
    new_line
  done

  # bottom border
  border_line "$1" "$lens"
  new_line
}

repeat_string() {
  local i
  if [[ 0 -ne $2 ]]; then
    for ((i = 1; i <= $2; i++)); do
      printf "%s" "$1"
    done
  fi
}

empty_block() {
  printf ' '
}

front_padding_block() {
  printf "%s" "$1"
  repeat_string ' ' "$BOX_PADDING_X"
}

back_padding_block() {
  repeat_string ' ' "$BOX_PADDING_X"
  printf "%s" "$1"
}

border_line() {
  repeat_string "$1" "$2"
}

new_line() {
  printf "\n"
}

empty_frame_line() {
  printf "%s" "$1"
  repeat_string ' ' "$2"
  printf "%s" "$1"
}

tab_to_space() {
  # shellcheck disable=SC2001
  echo "$1" | sed -e 's/\t/    /g'
}

is_pipe() {
  if [ -p /dev/stdin ]; then
    return 0
  elif [ -p /dev/stdout ]; then
    return 0
  else
    return 1
  fi
}

is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}

is_number() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    return 0
  else
    return 1
  fi
}

err_exit() {
  err "$1"
  if [[ -z "$2" ]]; then
    exit 1
  else
    exit "$2"
  fi
}

exit_health() {
  if [[ -n "$1" ]]; then
    info "$1"
  fi
  exit 0
}

exit_quit() {
  err "quit" 1>&2
  exit 1
}

# locale
export LC_ALL=C

# IFS
IFS=""

# trap
trap exit_quit QUIT SIGINT

# vars
BOX_PADDING_X=2
BOX_PADDING_Y=1
BOX_CHAR="#"
BOX_CHAR_RUNEWIDTH=1
TEST_FILE="./runeboxes_test"

## error code
ERR_CODE_INVALID_OPTION=3
ERR_CODE_INVALID_ARGUMENTS=4
ERR_CODE_INVALID_BOX_CHAR_WIDTH=5
ERR_CODE_INVALID_INPUT=6
ERR_CODE_NOT_FOUND_RUNEWIDTH=7
ERR_CODE_NOT_FOUND_TESTFILE=8

if [[ -z "$1" ]]; then
  BOX_CHAR="#"
else
  BOX_CHAR="$1"
fi

# flag option cases
while getopts ":htpxy" o; do
  case "${o}" in
  h)
    show_help
    exit_health ""
    ;;
  t)
    if [ -f "$TEST_FILE" ]; then
      info "start testing"
      # shellcheck disable=SC1090
      . "$TEST_FILE"
      info "end testing"
    else
      err_exit "$TEST_FILE is not found" "$ERR_CODE_NOT_FOUND_TESTFILE"
    fi
    exit_health ""
    ;;
  p)
    if [[ "$#" -eq 2 || "$#" -eq 3 && "$1" == "-p" ]]; then
      if [[ "$#" -eq 2 ]]; then
        BOX_CHAR="#"
      else
        if [[ -z $3 ]]; then
          BOX_CHAR="#"
        else
          BOX_CHAR="$3"
        fi
      fi
      if is_number "$2"; then
        BOX_PADDING_X="$2"
        BOX_PADDING_Y="$2"
      else
        err_exit "Invalid -p option usage" "$ERR_CODE_INVALID_OPTION"
      fi
    else
      err_exit "Invalid -p option usage" "$ERR_CODE_INVALID_OPTION"
    fi
    break
    ;;
  x)
    if [[ "$1" == "-x" ]]; then
      if [[ "$#" -lt 2 || "$#" -gt 5 ]]; then
        err_exit "Invalid -x option usage" "$ERR_CODE_INVALID_OPTION"
      fi
      if is_number "$2"; then
        BOX_PADDING_X="$2"
      else
        err_exit "Invalid -x option usage" "$ERR_CODE_INVALID_OPTION"
      fi
      if [[ -z "$3" ]]; then
        BOX_CHAR="#"
      elif [[ "$3" == "-y" ]]; then
        if [[ -z "$4" || -n "$6" ]]; then
          err_exit "Invalid -x -y option usage" "$ERR_CODE_INVALID_OPTION"
        else
          BOX_PADDING_Y="$4"
          if [[ -n "$5" ]]; then
            BOX_CHAR="$5"
          else
            BOX_CHAR="#"
          fi
        fi
      else
        if [[ -n "$4" ]]; then
          err_exit "Invalid -x -y option usage" "$ERR_CODE_INVALID_OPTION"
        else
          BOX_CHAR="$3"
        fi
      fi
    fi
    break
    ;;
  y)
    if [[ "$1" == "-y" ]]; then
      if [[ "$#" -lt 2 || "$#" -gt 5 ]]; then
        err_exit "Invalid -y option usage" "$ERR_CODE_INVALID_OPTION"
      fi
      if is_number "$2"; then
        BOX_PADDING_Y="$2"
      else
        err_exit "Invalid -y option usage" "$ERR_CODE_INVALID_OPTION"
      fi
      if [[ -z "$3" ]]; then
        BOX_CHAR="#"
      elif [[ "$3" == "-x" ]]; then
        if [[ -z "$4" || -n "$6" ]]; then
          err_exit "Invalid -x -y option usage" "$ERR_CODE_INVALID_OPTION"
        else
          BOX_PADDING_X="$4"
          if [[ -n "$5" ]]; then
            BOX_CHAR="$5"
          else
            BOX_CHAR="#"
          fi
        fi
      else
        if [[ -n "$4" ]]; then
          err_exit "Invalid -x -y option usage" "$ERR_CODE_INVALID_OPTION"
        else
          BOX_CHAR="$3"
        fi
      fi
    fi
    break
    ;;
  *)
    err_exit "Invalid option" "$ERR_CODE_INVALID_OPTION"
    ;;
  esac
done

BOX_CHAR_RUNEWIDTH="$(runewidth "$BOX_CHAR")"

# run
if [[ -z "$BOX_CHAR" ]]; then
  err_exit "Argument is required" "$ERR_CODE_INVALID_ARGUMENTS"
elif [[ "$BOX_CHAR_RUNEWIDTH" -gt 2 ]]; then
  err_exit "String is over 2 runewidth" "$ERR_CODE_INVALID_BOX_CHAR_WIDTH"
elif ! is_pipe; then
  err_exit "Pipe input is requird" "$ERR_CODE_INVALID_INPUT"
elif ! is_exists "runewidth"; then
  err_exit "Command not found: runewidth" "$ERR_CODE_NOT_FOUND_RUNEWIDTH"
else
  out="$(run_runeboxes "$BOX_CHAR")"
  echo "$out"
fi
